@using Microsoft.AspNetCore.Mvc.ModelBinding
@model AuthLoginForm
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ContactManager - Login</title>
    <link rel="stylesheet" href="/lib/bootstrap/dist/css/bootstrap.min.css">
    <script src="/lib/bootstrap/dist/js/bootstrap.min.js"></script>
</head>
<body>
    <nav>
        <ul class="nav justify-content-center">
            <li class="nav-item">
                <a class="nav-link" href="/">
                    <div>Home</div>
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="/Home/Privacy">
                    <div>Privacy</div>
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="/Auth/Login">
                    <div>Login</div>
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="/Auth/Register">
                    <div>Register</div>
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="/Contact/Index">
                    <div>Contact list</div>
                </a>
            </li>
        </ul>
    </nav>
    @*@if(!ViewContext.ModelState.IsValid){
        <div class="alert alert-danger">Il y a des erreurs...
            <dl>
        @foreach(KeyValuePair<string,ModelStateEntry> kvp in ViewContext.ModelState){
            if(kvp.Value.Errors.Count()>0){
                <dt>@kvp.Key :</dt>
                <dd>
                    <ul>
                        @foreach(ModelError error in kvp.Value.Errors){
                            <li> @error.ErrorMessage</li>
                        }
                    
                    </ul>
                </dd>
            }
        }
        </dl>
        </div>
    }
    *@
    @if (!ViewContext.ModelState.IsValid)
    {
        @Html.ValidationSummary(true,$"Il y a des erreurs dans le formulaire ({ViewContext.ModelState.ErrorCount})", htmlAttributes: new {@class="alert alert-danger"})
    }
    <div class="container">
        @using(Html.BeginForm()){
            <div class="form-group">
                @*<label for="email">Email : </label>
                <input class="form-control" id="email" name="email" type="email">*@
                @Html.LabelFor(model => model.Email)
                @Html.EditorFor(model => model.Email, new{ HtmlAttributes = new{@class="form-control"}})
                @Html.ValidationMessageFor(model => model.Email, null, htmlAttributes:new{@class="text-warning"})
            </div>
            <div class="form-group">
                @*<label for="password">Mot de passe : </label>
                <input class="form-control" id="password" name="password" type="password">*@
                @Html.LabelFor(model => model.Password)
                @Html.EditorFor(model => model.Password, new{ HtmlAttributes = new{@class="form-control"}})
                @Html.ValidationMessageFor(model => model.Password, null, htmlAttributes:new{@class="text-warning"})
            </div>
            <div class="btn-group">
                <input class="btn btn-primary" type="submit" value="Login">
                <input class="btn btn-secondary" type="reset" value="Annuler">
            </div>
        }
    </div>
</body>
</html>